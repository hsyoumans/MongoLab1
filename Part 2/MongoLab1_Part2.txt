In people collection
1. Add a person to the collection. You pick the data, but they should have an empty array
for children.
	db.people.insertOne({first_name:"Sam", last_name: "Walker", email: "swalker@abc123.net", gender: "Male", age: 64, state: "Michigan", 	children: []});

2. Add another person. They should have at least two children.
	db.people.insertOne({first_name:"Joel", last_name: "Ehrlingher", email: "jehrlingher@abc123.net", gender: "Male", age: 63, state: 	"Michigan", children: [{name: "Sarah", age: 32}, {name: "Ben", age: 29}]});

3. Update one person named Clarence. He moved from North Dakota to South Dakota.
	db.people.updateOne({$and:[{first_name: "Clarence"},{state: "North Dakota"}]}, {$set: {state: "South Dakota"}});

4. Update Rebecca Hayes. Remove her email address.
	db.people.updateOne({$and: [{first_name: "Rebecca"}, {last_name: "Hayes"}]}, {$set: {email: null}});

5. Update everyone from Missouri. They all had a birthday today, so add one to their age.
(expect 4 matches)
	db.people.updateMany({state:"Missouri"}, {$inc:{age:1}});

6. Jerry Baker has updated information. Replace with a new document:
{ first_name: "Jerry", last_name: "Baker-Mendez", email:
"jerry@classic.ly", gender:"Male", age: 28, state: "Vermont",
"children": [{name: "Alan", age: 18}, {name: "Jenny", age: 3}] }
	db.people.replaceOne({"first_name": "Jerry", "last_name": "Baker"}, {"first_name": "Jerry", "last_name": "Baker-Mendez", "email": "jerry@classic.ly", "gender": "Male", "age": 28, "state": "Vermont", "children": [{"name": "Alan", "age": 18}, {"name": "Jenny", "age": 3}]});

7. Delete Wanda Bowman.
	db.people.deleteOne({first_name: "Wanda", last_name: "Bowman"});

8. Delete everyone who does not have an email address specifed. (expect 36 matches -
maybe more depending what you added above)
	db.people.deleteMany({email: null});


In submissions collection
9. Add several documents to a new submissions collection. Do it all in one command.
(Remember, MongoDB will create the collection for you. Just start adding documents.)
a. title: "The River Bend", upvotes: 10, downvotes: 2, artist: "617b4afa6d4cfe4cb62136ae"
b. title: "Nine Lives", upvotes: 7, downvotes: 0, artist: "617b4afa6d4cfe4cb62136dc"
c. title: "Star Bright", upvotes: 19, downvotes: 3, artist: "617b4afa6d4cfe4cb621375f"
d. title: "Why Like This?", upvotes: 1, downvotes: 5, artist: "617b4afa6d4cfe4cb62136e5"
e. title: "Non Sequitur", upvotes: 11, downvotes: 1, artist: "617b4afa6d4cfe4cb62136ac"
	db.submissions.insertMany([{title: "The River Bend", upvotes: 10, downvotes: 2, artist: "617b4afa6d4cfe4cb62136ae"}, {title: "Nine Lives", upvotes: 7, downvotes: 0, artist: "617b4afa6d4cfe4cb62136dc"}, {title: "Star Bright", upvotes: 19, downvotes: 3, artist: "617b4afa6d4cfe4cb621375f"}, {title: "Why Like This?", upvotes: 1, downvotes: 5, artist: "617b4afa6d4cfe4cb62136e5"}, {title: "Non Sequitur", upvotes: 11, downvotes: 1, artist: "617b4afa6d4cfe4cb62136ac"}]);

10. Add 2 upvotes for "The River Bend".
	db.submissions.updateOne({title: "The River Bend"}, {$inc: {upvotes:2}});

11. Add a field round2 = true to all submissions with at least 10 upvotes. (expect 3
matches)
	db.submissions.updateMany({upvotes:{$gte:10}}, {$set:{"round2":true}});


Extended Challenges:
12. Update Helen Clark. She had a baby! Add a child, name: Melanie, age: 0.
	db.people.updateOne({first_name: "Helen", last_name: "Clark"}, {$push: {children: {name:"Melanie", age: 0}}});

13. Joan Bishop has a child named Catherine. She just had a birthday and prefers to go by
"Cat". In one query update the child's name to "Cat" and increment her age by one.
	db.people.updateOne({first_name: "Joan", last_name: "Bishop", "children.3.name":"Catherine"}, { $set: {"children.3.name": "Cat"}, $inc: {"children.3.age":1}});

14. List all submissions that have more downvotes than upvotes.
	db.submissions.find({$expr:{$gt:["$downvotes", "$upvotes"]}});








